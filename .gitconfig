[user]
	name = WickyNilliams
	email = WickyNilliams@MBA

[alias]
	# View the SHA, description, and history graph of the latest 20 commits
	l = log --pretty=oneline -n 20 --graph --abbrev-commit
	# Fancy log
	lg = log --graph --pretty=fancy
	# View the current working tree status using the short format
	s = status -s
	# Show the diff between the latest commit and the current state
	d = !"git diff-index --quiet HEAD -- || clear; git diff --patch-with-stat"
	# `git di $number` shows the diff between the state `$number` revisions ago and the current state
	di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"
	# Pull in remote changes for the current repository and all its submodules
	p = !"git pull; git submodule foreach git pull origin master"
	# Clone a repository including all submodules
	c = clone --recursive
	# Commit all changes
	ca = !git add -A && git commit -av
	# Switch to a branch, creating it if necessary
	go = checkout -B
	# Show verbose output about tags, branches or remotes
	co = checkout
	tags = tag -l
	branches = branch -a
	remotes = remote -v
	stashes = stash list
	# Amend the currently staged files to the latest commit
	amend = commit --amend --reuse-message=HEAD
	# Credit an author on the latest commit
	credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"
	# Interactive rebase with the given number of latest commits
	reb = "!r() { git rebase -i HEAD~$1; }; r"
	# Undo a `git push`
	undopush = push -f origin HEAD^:master
	# clear unstaged changes
	clear = checkout -- .
	# remove merged branches (local and remote)
	cleanup = "!f() { git branch --merged | grep -v '\\*\\|master\\|main\\|develop' | xargs git branch -d; git remote prune origin; }; f"
	# update a branch by rebasing against another branch, defaulting to main
	update = "!u() { git checkout ${1:-main}; git pull; git checkout -; git rebase ${1:-main}; }; u"

[core]
	# Use custom `.gitignore` and `.gitattributes`
	excludesfile = ~/.gitignore
	attributesfile = ~/.gitattributes
	editor = code --wait

[color]
	# Use colors in Git commands that are capable of colored output when outputting to the terminal
	ui = auto

[color "branch"]
	current = yellow reverse
	local = yellow
	remote = green
[color "diff"]
	meta = yellow bold
	frag = magenta bold
	old = red bold
	new = green bold
[color "status"]
	added = green
	changed = yellow
	untracked = red

# URL shorthands
[url "git@github.com:"]
	insteadOf = "gh:"
	pushInsteadOf = "github:"
	pushInsteadOf = "git://github.com/"
[url "git://github.com/"]
	insteadOf = "github:"
[url "git@gist.github.com:"]
	insteadOf = "gst:"
	pushInsteadOf = "gist:"
	pushInsteadOf = "git://gist.github.com/"
[url "git://gist.github.com/"]
	insteadOf = "gist:"

[diff]
	tool = opendiff

[pretty]
	fancy = "%C(yellow)%h%Creset -%C(blue)%d%Creset %s %Cgreen(%cr)%Creset %C(dim white)%an%C(reset)"

[fetch]
	prune = true

# rebase by default when pulling
[pull]
	rebase = true

[push]
	# https://git-scm.com/docs/git-config#git-config-pushdefault
	default = simple
	# Make `git push` push relevant annotated tags when pushing branches out.
	followTags = true
